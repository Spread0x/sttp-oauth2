(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[478],{8735:function(e,t,o){"use strict";o.r(t),o.d(t,{frontMatter:function(){return a},metadata:function(){return d},toc:function(){return s},default:function(){return p}});var n=o(2122),i=o(9756),r=(o(7294),o(3905)),a={sidebar_position:3,description:"Authorization code grant documentation"},d={unversionedId:"authorization-code",id:"authorization-code",isDocsHomePage:!1,title:"Authorization code grant",description:"Authorization code grant documentation",source:"@site/../mdoc/target/mdoc/authorization-code.md",sourceDirName:".",slug:"/authorization-code",permalink:"/sttp-oauth2/docs/authorization-code",editUrl:"https://github.com/ocadotechnology/sttp-oauth2/edit/main/docs/authorization-code.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"Authorization code grant documentation"},sidebar:"tutorialSidebar",previous:{title:"Client credentials grant",permalink:"/sttp-oauth2/docs/client-credentials"},next:{title:"Password grant",permalink:"/sttp-oauth2/docs/password-grant"}},s=[{value:"Methods",id:"methods",children:[]},{value:"Token types",id:"token-types",children:[]},{value:"Configuration",id:"configuration",children:[]}],u={toc:s};function p(e){var t=e.components,o=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AuthorizationCode")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"AuthorizationCodeProvider")," - provide functionality for: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"generating ",(0,r.kt)("em",{parentName:"li"},"login")," and ",(0,r.kt)("em",{parentName:"li"},"logout")," redirect links,"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"authCodeToToken")," for converting authorization code to token,"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"refreshAccessToken")," for performing a token refresh request")),(0,r.kt)("h2",{id:"token-types"},"Token types"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"authCodeToToken")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"refreshAccessToken")," require ",(0,r.kt)("inlineCode",{parentName:"p"},"RT <: OAuth2TokenResponse.Basic: Decoder")," type parameter, that describes desired. response structure. You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"OAuth2TokenResponse"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ExtendedOAuth2TokenResponse")," or roll your own type that matches the type bounds."),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"OAuth2 doesn't precisely define urls for used for the process. Those differ by provider.\n",(0,r.kt)("inlineCode",{parentName:"p"},"AuthorizationCodeProvider.Config")," provides a structure for configuring the endpoints.\nFor login with GitHub you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"AuthorizationCodeProvider.Config.GitHub"),". Feel free to issue a PR if you want any other well-known provider supported."))}p.isMDXComponent=!0}}]);